generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Slide {
  id          Int      @id @default(autoincrement())
  Title       String
  Subtitle    String
  Title_ku    String?
  Subtitle_ku String?
  Title_ar    String?
  Subtitle_ar String?
  Image       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Product {
  id             Int       @id @default(autoincrement())
  Name           String
  Description    String
  Price          Int
  Discount       Int
  Thumbnail      String
  Images         String[]
  Stock          Int
  Name_ku        String?
  Description_ku String?
  Name_ar        String?
  Description_ar String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  Category       Category? @relation(fields: [categoryId], references: [id])
  categoryId     Int?
  Brand          Brand?    @relation(fields: [brandId], references: [id])
  brandId        Int?
}

model Category {
  id        Int       @id @default(autoincrement())
  Name      String
  Products  Product[]
  Name_ku   String?
  Name_ar   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Brand {
  id        Int       @id @default(autoincrement())
  Name      String
  Products  Product[]
  Name_ku   String?
  Name_ar   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Widget {
  id             Int      @id @default(autoincrement())
  Slot           String   @unique
  Title          String
  Title_Color    String?
  Subtitle       String
  Subtitle_Color String?
  Title_ku       String?
  Subtitle_ku    String?
  Title_ar       String?
  Subtitle_ar    String?
  Image          String
  ImageAlt       String
  ImageLink      String
  Type           String
  Background     String
  Category       String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
